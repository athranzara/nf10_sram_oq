##############################################################################
## Filename:          /local/scratch/jz377/Dropbox/nf10_sram_oq/pcores/nf10_sram_output_queue_v1_00_a/data/nf10_sram_output_queue_v2_1_0.mpd
## Description:       Microprocessor Peripheral Description
## Date:              Fri Dec 12 15:40:13 2014 (by Create and Import Peripheral Wizard)
##############################################################################

BEGIN nf10_sram_output_queue

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION USAGE_LEVEL = BASE_USER
OPTION STYLE = HDL
OPTION RUN_NGCBUILD = TRUE
OPTION IP_GROUP = Communication High-Speed:MICROBLAZE
OPTION DESC = NetFPGA-10G SRAM Output Queues
OPTION LONG_DESC = NetFPGA-10G SRAM Output Queues


## IO Interfaces
IO_INTERFACE IO_IF = memory_0
IO_INTERFACE IO_IF = memory_1
IO_INTERFACE IO_IF = memory_2
IO_INTERFACE IO_IF = debug

## Bus Interfaces
BUS_INTERFACE BUS = S_AXIS, BUS_STD = AXIS, BUS_TYPE = TARGET
BUS_INTERFACE BUS = M_AXIS_0, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_1, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_2, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_3, BUS_STD = AXIS, BUS_TYPE = INITIATOR
BUS_INTERFACE BUS = M_AXIS_4, BUS_STD = AXIS, BUS_TYPE = INITIATOR
#BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE



## Parameters
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_S_AXIS_DATA_WIDTH = 256, DT = INTEGER, RANGE = (8,32,64,256), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_M_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4
PARAMETER C_S_AXIS_TUSER_WIDTH = 128, DT = INTEGER, RANGE = (128), BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4

### AXILITE Parameters
#PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
#PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
#PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ASSIGNMENT = REQUIRE
#PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, ASSIGNMENT = REQUIRE
#PARAMETER C_FAMILY = virtex5, DT = STRING
#PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = axi_aclk, CLK_UNIT = HZ, ASSIGNMENT = REQUIRE
#
### Registers offsets definitions
#PARAMETER RESET_CNTRS_OFFSET = 0x0, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_STORED_PORT_0_OFFSET = 0x4, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_STORED_PORT_0_OFFSET = 0x8, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_REMOVED_PORT_0_OFFSET = 0xc, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_REMOVED_PORT_0_OFFSET = 0x10, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_DROPPED_PORT_0_OFFSET = 0x14, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_DROPPED_PORT_0_OFFSET = 0x18, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_IN_QUEUE_PORT_0_OFFSET = 0x1c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_IN_QUEUE_PORT_0_OFFSET = 0x20, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_STORED_PORT_1_OFFSET = 0x24, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_STORED_PORT_1_OFFSET = 0x28, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_REMOVED_PORT_1_OFFSET = 0x2c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_REMOVED_PORT_1_OFFSET = 0x30, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_DROPPED_PORT_1_OFFSET = 0x34, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_DROPPED_PORT_1_OFFSET = 0x38, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_IN_QUEUE_PORT_1_OFFSET = 0x3c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_IN_QUEUE_PORT_1_OFFSET = 0x40, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_STORED_PORT_2_OFFSET = 0x44, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_STORED_PORT_2_OFFSET = 0x48, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_REMOVED_PORT_2_OFFSET = 0x4c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_REMOVED_PORT_2_OFFSET = 0x50, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_DROPPED_PORT_2_OFFSET = 0x54, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_DROPPED_PORT_2_OFFSET = 0x58, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_IN_QUEUE_PORT_2_OFFSET = 0x5c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_IN_QUEUE_PORT_2_OFFSET = 0x60, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_STORED_PORT_3_OFFSET = 0x64, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_STORED_PORT_3_OFFSET = 0x68, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_REMOVED_PORT_3_OFFSET = 0x6c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_REMOVED_PORT_3_OFFSET = 0x70, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_DROPPED_PORT_3_OFFSET = 0x74, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_DROPPED_PORT_3_OFFSET = 0x78, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_IN_QUEUE_PORT_3_OFFSET = 0x7c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_IN_QUEUE_PORT_3_OFFSET = 0x80, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_STORED_PORT_4_OFFSET = 0x84, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_STORED_PORT_4_OFFSET = 0x88, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_REMOVED_PORT_4_OFFSET = 0x8c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_REMOVED_PORT_4_OFFSET = 0x90, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_DROPPED_PORT_4_OFFSET = 0x94, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_DROPPED_PORT_4_OFFSET = 0x98, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER PKT_IN_QUEUE_PORT_4_OFFSET = 0x9c, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
#PARAMETER BYTES_IN_QUEUE_PORT_4_OFFSET = 0x100, DT = std_logic_vector(31 downto 0), BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL


## Peripheral ports
PORT axi_aclk = "", DIR = I, SIGIS = CLK, BUS = S_AXIS:M_AXIS_0:M_AXIS_1:M_AXIS_2:M_AXIS_3:M_AXIS_4:S_AXI, ASSIGNMENT = REQUIRE
PORT axi_resetn = "", DIR = I, SIGIS = RST, ASSIGNMENT = REQUIRE

PORT memclk = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT memclk_200 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK
PORT memclk_270 = "", DIR = I, ASSIGNMENT = REQUIRE, SIGIS = CLK

PORT s_axis_tdata = TDATA, DIR = I, VEC = [C_S_AXIS_DATA_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tstrb = TSTRB, DIR = I, VEC = [(C_S_AXIS_DATA_WIDTH/8)-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tuser = TUSER, DIR = I, VEC = [C_S_AXIS_TUSER_WIDTH-1:0], BUS = S_AXIS, ENDIAN = LITTLE
PORT s_axis_tvalid = TVALID, DIR = I, BUS = S_AXIS
PORT s_axis_tready = TREADY, DIR = O, BUS = S_AXIS
PORT s_axis_tlast = TLAST, DIR = I, BUS = S_AXIS

PORT m_axis_tdata_0 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tstrb_0 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tuser_0 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_0, ENDIAN = LITTLE
PORT m_axis_tvalid_0 = TVALID, DIR = O, BUS = M_AXIS_0
PORT m_axis_tready_0 = TREADY, DIR = I, BUS = M_AXIS_0
PORT m_axis_tlast_0 = TLAST, DIR = O, BUS = M_AXIS_0

PORT m_axis_tdata_1 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tstrb_1 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tuser_1 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_1, ENDIAN = LITTLE
PORT m_axis_tvalid_1 = TVALID, DIR = O, BUS = M_AXIS_1
PORT m_axis_tready_1 = TREADY, DIR = I, BUS = M_AXIS_1
PORT m_axis_tlast_1 = TLAST, DIR = O, BUS = M_AXIS_1

PORT m_axis_tdata_2 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tstrb_2 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tuser_2 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_2, ENDIAN = LITTLE
PORT m_axis_tvalid_2 = TVALID, DIR = O, BUS = M_AXIS_2
PORT m_axis_tready_2 = TREADY, DIR = I, BUS = M_AXIS_2
PORT m_axis_tlast_2 = TLAST, DIR = O, BUS = M_AXIS_2

PORT m_axis_tdata_3 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tstrb_3 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tuser_3 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_3, ENDIAN = LITTLE
PORT m_axis_tvalid_3 = TVALID, DIR = O, BUS = M_AXIS_3
PORT m_axis_tready_3 = TREADY, DIR = I, BUS = M_AXIS_3
PORT m_axis_tlast_3 = TLAST, DIR = O, BUS = M_AXIS_3

PORT m_axis_tdata_4 = TDATA, DIR = O, VEC = [C_M_AXIS_DATA_WIDTH-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tstrb_4 = TSTRB, DIR = O, VEC = [(C_M_AXIS_DATA_WIDTH/8)-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tuser_4 = TUSER, DIR = O, VEC = [C_M_AXIS_TUSER_WIDTH-1:0], BUS = M_AXIS_4, ENDIAN = LITTLE
PORT m_axis_tvalid_4 = TVALID, DIR = O, BUS = M_AXIS_4
PORT m_axis_tready_4 = TREADY, DIR = I, BUS = M_AXIS_4
PORT m_axis_tlast_4 = TLAST, DIR = O, BUS = M_AXIS_4

PORT qdr_d_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_q_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [36-1:0]
PORT qdr_sa_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0, VEC = [19-1:0]
PORT qdr_w_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_r_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_bw_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0, VEC = [4-1:0]
PORT qdr_dll_off_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_0
PORT qdr_cq_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_cq_n_0 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_n_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_c_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]
PORT qdr_k_0 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [0:0]

PORT qdr_d_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_q_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [36-1:0]
PORT qdr_sa_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1, VEC = [19-1:0]
PORT qdr_w_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_r_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_bw_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1, VEC = [4-1:0]
PORT qdr_dll_off_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_1
PORT qdr_cq_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_cq_n_1 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_n_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_c_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]
PORT qdr_k_1 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_1,  VEC = [0:0]

PORT qdr_d_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_q_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [36-1:0]
PORT qdr_sa_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2, VEC = [19-1:0]
PORT qdr_w_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_r_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_bw_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2, VEC = [4-1:0]
PORT qdr_dll_off_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE, IO_IF = memory_2
PORT qdr_cq_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_cq_n_2 = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_n_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_c_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]
PORT qdr_k_2 = "", DIR = O, ASSIGNMENT = REQUIRE,  IO_IF = memory_2,  VEC = [0:0]

PORT masterbank_sel_pin = "", DIR = I, ASSIGNMENT = REQUIRE,  IO_IF = memory_0,  VEC = [2:0]

PORT aresetn = "", DIR=I, ASSIGNMENT = REQUIRE, DIR = I, SIGIS = RST

PORT locked = "", DIR = I, ASSIGNMENT = REQUIRE

PORT debug_mem_controller_dout = "", DIR = O, IO_IF = debug,  VEC = [215:0]
PORT debug_mem_controller_dout_addr = "", DIR = O,  IO_IF = debug,  VEC = [18:0]
PORT debug_mem_controller_dout_ready = "", DIR = O,  IO_IF = debug,  VEC = [0:0]
PORT debug_calibration = "", DIR = O,  IO_IF = debug,  VEC = [2:0]
PORT mem_dbg = "", DIR = O, IO_IF = debug, VEC = [63:0]
PORT fifo_dbg = "", DIR = O, IO_IF = debug, VEC = [63:0]

END